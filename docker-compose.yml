services:

  frontend:
    build:
      context: ./Frontend  # Répertoire où se trouve ton Dockerfile pour le frontend
      dockerfile: Dockerfile  # Nom du Dockerfile
    container_name: frontend  # Nom du conteneur
    env_file:
      - path: .env  # Charge les variables d'environnement
        required: true
    ports:
      - "8080:80"  # Expose le frontend sur le port 8080
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80"]
      interval: 2s
      retries: 10
      start_period: 5s

  nginx:
    build:
      context: ./Nginx  # Répertoire où se trouve ton Dockerfile pour Nginx
      dockerfile: Dockerfile  # Nom du Dockerfile
    container_name: nginx-https  # Nom du conteneur
    ports:
      - "8443:8443"  # Expose Nginx sur le port HTTPS (443)
    networks:
      - transcendence
    env_file:
      - path: .env  # Charge les variables d'environnement
        required: true
    restart: always
    depends_on:
      frontend:  # Assure-toi que le frontend est démarré avant Nginx
        condition: service_healthy
      postgres:  # Assure-toi que PostgreSQL est démarré avant Nginx
        condition: service_healthy
      #api:  # Assure-toi que l'API est démarrée avant Nginx
      #   condition: service_healthy


  postgres:
    build:
      context: ./PostgreSQL  # Répertoire où se trouve ton Dockerfile pour PostgreSQL
      dockerfile: Dockerfile  # Nom du Dockerfile
    ports:
      - "5432:5432"  # Expose PostgreSQL sur le port 5432
    container_name: postgres  # Nom du conteneur
    networks:
      - transcendence
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql  # Persistance des données
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "127.0.0.1", "-p", "5432", "-t", "2"]
      interval: 2s
      retries: 20
    restart: always #should be always


  api:
    build:
      context: ./Backend_API  # Répertoire où se trouve ton Dockerfile pour l'API
      dockerfile: Dockerfile  # Nom du Dockerfile
    # container_name: api  # Nom du conteneur
    ports:
      - "8000:8000"  # Expose l'API sur le port 8000
    networks:
      - transcendence
    restart: always #should be always
    env_file:
      - path: .env  # Charge les variables d'environnement
        required: true
    volumes:
      - media_data:/app/media  # Persistance des fichiers média
    depends_on:
      postgres:  # Assure-toi que PostgreSQL est démarré avant l'API
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/players"]
      interval: 2s
      retries: 10


  prometheus:
    build:
      context: ./Prometheus  # Répertoire où se trouve ton Dockerfile pour Prometheus
      dockerfile: Dockerfile  # Nom du Dockerfile
    container_name: prometheus_custom  # Nom du conteneur
    ports:
      - "9090:9090"  # Expose Prometheus sur le port 9090
    networks:
      - transcendence
    volumes:
      - prometheus_data:/prometheus-xyzabc  # Monte le fichier de configuration


  grafana:
    image: grafana/grafana:latest  # Utilise l'image officielle de Grafana
    ports:
      - "3000:3000"  # Expose Grafana sur le port 3000
    networks:
      - transcendence
    env_file:
      - path: .env  # Charge les variables d'environnement
        required: true
    depends_on:
      - prometheus  # Assure-toi que Prometheus est démarré avant Grafana
    volumes:
      - grafana_data:/var/lib/grafana  # Persistance des données


volumes:
  postgres_data:  # Volume pour stocker les données PostgreSQL
    driver_opts:
      type: none
      device: ${HOME}/transcendence/postgresql
      o: bind

  media_data:  # Volume pour stocker les fichiers média
    driver_opts:
      type: none
      device: ${HOME}/transcendence/media
      o: bind

  prometheus_data:  # Volume pour stocker les données Prometheus
    driver_opts:
      type: none
      device: ${HOME}/transcendence/prometheus
      o: bind

  grafana_data:  # Volume pour stocker les données Grafana
    driver_opts:
      type: none
      device: ${HOME}/transcendence/grafana
      o: bind

networks:
  transcendence:  # Crée un réseau dédié pour tous les services
    driver: bridge
