services:

  frontend:
    build:
      context: ./Frontend  # Répertoire où se trouve ton Dockerfile pour le frontend
      dockerfile: Dockerfile  # Nom du Dockerfile
    container_name: frontend  # Nom du conteneur
    env_file:
      - path: .env  # Charge les variables d'environnement
        required: true
    ports:
      - "8080:80"  # Expose le frontend sur le port 8080
    networks:
      - transcendence
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80"]
      interval: 2s
      retries: 10
      start_period: 5s

  nginx:
    build:
      context: ./Nginx  # Répertoire où se trouve ton Dockerfile pour Nginx
      dockerfile: Dockerfile  # Nom du Dockerfile
    container_name: nginx-https  # Nom du conteneur
    ports:
      - "8443:8443"  # Expose Nginx sur le port HTTPS (443)
    networks:
      - transcendence
    env_file:
      - path: .env  # Charge les variables d'environnement
        required: true
    restart: always
    depends_on:
      frontend:  # Assure-toi que le frontend est démarré avant Nginx
        condition: service_healthy
      postgres:  # Assure-toi que PostgreSQL est démarré avant Nginx
        condition: service_healthy
      # api:  # Assure-toi que l'API est démarrée avant Nginx
      #   condition: service_healthy


  postgres:
    build:
      context: ./PostgreSQL  # Répertoire où se trouve ton Dockerfile pour PostgreSQL
      dockerfile: Dockerfile  # Nom du Dockerfile
    ports:
      - "5432:5432"  # Expose PostgreSQL sur le port 5432
    container_name: postgres  # Nom du conteneur
    networks:
      - transcendence
    env_file:
      - path: .env  # Charge les variables d'environnement
        required: true
    volumes:
      - postgres_data:/var/lib/postgresql  # Persistance des données
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "127.0.0.1", "-p", "5432", "-t", "2"]
      interval: 2s
      retries: 20
    restart: always


volumes:
  postgres_data:  # Volume pour stocker les données PostgreSQL
    driver_opts:
      type: none
      device: ${HOME}/transcendence/postgresql
      o: bind

  # media:  # Volume pour stocker les fichiers média
  #   driver_opts:
  #     type: none
  #     device: /var/www/html/media
  #     o: bind

networks:
  transcendence:  # Crée un réseau dédié pour tous les services
    driver: bridge
