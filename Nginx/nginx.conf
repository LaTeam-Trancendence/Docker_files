# Nombre de processus de travail Nginx (ajuster selon les ressources système)
worker_processes 2;

# Emplacement du fichier PID de Nginx (identifiant de processus)
pid /var/run/nginx.pid;

# Configuration des connexions réseau
events {
	worker_connections 2048; # Nombre maximum de connexions simultanées par processus
}

# Bloc principal pour gérer les requêtes HTTP et HTTPS
http {

	#C'est quoi un upstream ?
		#Dans ce cas, on a 3 upstreams : pong, api et frontend
		#Chaque upstream est un groupe de serveurs qui peuvent être contactés
		#pour obtenir une ressource.

	#Comment avoir la bonne adresse pour le serveur ?
		#On utilise le nom du service et le port du service.

	#comment on peut avoir le nom du service ?
		#On peut utiliser le nom du service dans le fichier docker-compose.yml

	#comment on peut avoir le port du service ?
		#On peut utiliser le port du service dans le fichier docker-compose.yml

	# Définir un groupe de serveurs pour l'API (upstream)
	# upstream api {
	# 	server ft-transcendence-api-1.transcendence:$API_PORT;
	# 	# Nom du service "ft-transcendence-api-1" défini dans docker-compose.yml
	# 	# $API_PORT est la variable d'environnement pour le port
	# }

	# Définir un groupe de serveurs pour le Frontend
	upstream frontend {
		server ft-transcendence-frontend-1.transcendence:80;
		# Nom du service "ft-transcendence-frontend-1" et port 80 (par défaut pour HTTP)
	}

	# Types MIME pour les fichiers servis
	#include conf/mime.types;
	default_type application/octet-stream; # Par défaut pour les fichiers inconnus

	# Configuration des journaux
	access_log /var/log/nginx/access.log; # Requêtes réussies
	error_log stderr;                     # Erreurs envoyées vers la sortie standard

	# Activer la compression GZIP
	gzip on;
	gzip_min_length 1100;                # Taille minimale des fichiers à compresser
	gzip_buffers 4 8k;                   # Taille des tampons pour la compression
	gzip_types text/plain;               # Types de fichiers à compresser

	# Taille maximale des requêtes clients (0 = illimité)
	client_max_body_size 0;

	# Serveur principal
	server {
		listen 8443 ssl;          # Écoute sur toutes les adresses sur le port 443 (HTTPS)
		server_name $HOSTNAME;           # Nom d'hôte (défini par variable d'environnement)

		# Certificats SSL auto-signés
		ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
		ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

		# Protocole SSL utilisé (TLSv1.3 est le plus sécurisé)
		ssl_protocols TLSv1.3;

		# Configuration CORS (Cross-Origin Resource Sharing)
		add_header 'Access-Control-Allow-Origin' '*' always; # Autorise toutes les origines
		add_header access-control-allow-credentials true always;
		add_header access-control-allow-methods 'GET, POST, PUT, DELETE, OPTIONS' always;
		add_header access-control-allow-headers 'Accept,Authorization,Content-Type,Keep-Alive,Origin,User-Agent,Content-Disposition' always;

		# Localisation des requêtes vers /api/
		location ^~/api/ {
			proxy_set_header Host $host;                  # Transmet l'hôte au backend
			proxy_set_header X-Real-IP $remote_addr;      # Adresse IP réelle du client
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Chaîne d'IP

			#proxy_pass http://api/; # Redirige les requêtes vers le groupe upstream "api"
		}

		# Localisation des requêtes pour toutes les autres URL (Frontend)
		location / {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			proxy_pass http://frontend; # Redirige vers le groupe upstream "frontend"
		}
	}
}
